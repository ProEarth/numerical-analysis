#pragma once
#include<iostream>
#include<cmath>
#include<fstream>
using namespace std;
ofstream Out_Error("D:\\ERROR.txt");
ofstream Out_Residual("D:\\RESIDUAL.txt");
static int Jacobi_Iteration_Number = 0;
static int Gauss_Seidel_Iteration_Number = 0;
double x_star[2048] = { 1,1,1 };
double Error;
double Residual;
void CREAT_TEST(double Test[][2048],double b_Test[] ,int Part_Rank)
{
	for (int i = 0; i < Part_Rank*Part_Rank; i++)
	{
		b_Test[i] = 0;
		for (int j = 0; j < Part_Rank*Part_Rank; j++)
		{
			Test[i][j] = 0;
			if (i == j)
			{
				Test[i][j] = 4;
				b_Test[i] += 4;
			}
			if (abs(i - j) == 1)
			{
				Test[i][j] = -1;
				b_Test[i] += -1;
			}
			if (abs(i - j) == Part_Rank)
			{
				Test[i][j] = -1;
				b_Test[i] += -1;
			}
		}
	}
}
void RESET_TEST(double x1[], double x2[], int Rank)
{
	for (int i = 0; i < Rank*Rank; i++)
	{
		x1[i] = 0;
		x2[i] = 0;
	}
	x1[0] = 100;
	x2[0] = 0;
}
double NORM_INFINITE(double *Vector, int Dimension)
{
	int i;
	double Norm = 0;
	for (i = 0; i < Dimension; i++)
	{
		if (fabs(Vector[i]) > Norm)
		{
			Norm = fabs(Vector[i]);
		}
	}
	return Norm;
}
double DISTANCE(double *Vector_1, double *Vector_2, int Dimension)
{
	double Distance[2048];
	for (int i = 0; i < Dimension; i++)
	{
		Distance[i] = Vector_1[i] - Vector_2[i];
	}
	return NORM_INFINITE(Distance, Dimension);
}
double POWER_METHOD(double A[][2048], int Dimension)
{
	int MAX = 100000;
	double TOL = 0.0000001;
	int k = 1;
	double u0[2048] = { 0 };
	double u[2048];
	int i;
	double b = NORM_INFINITE(u, Dimension);
}
void RESIDUAL(double A[][2048], double x[], double b[], int Dimension, double r[])
{
	int i, j;
	for (i = 0; i < Dimension; i++)
	{
		r[i] = -b[i];
		for (j = 0; j < Dimension; j++)
		{
			r[i] += A[i][j] * x[i];
		}
	}
}

void JACOBI_ITERATION(double A[][2048], double b[], int Dimension, double x_now[], double x_next[])
{
	int i, j;
	for (i = 0; i < Dimension; i++)
	{
		x_next[i] = b[i];
		for (j = 0; j < Dimension; j++)
		{
			x_next[i] -= A[i][j] * x_now[j];
		}
		x_next[i] = (x_next[i] + x_now[i] * A[i][i]) / A[i][i];
	}
	Jacobi_Iteration_Number++;
}

void JACOBI(double A[][2048], double b[], int Dimension, double x_start[], double x_next[], int Stop_Criterion)
//Stop_Criterion=1.残量准则；2.相邻误差准则；3.后验误差停机准则
{
	int i;

	if (Stop_Criterion == 1)
	{
		double r[2048];
		RESIDUAL(A, x_start, b, Dimension, r);
		Out_Residual << "Residual=[";
		while ((Residual = NORM_INFINITE(r, Dimension))>0.000001)//残差准则
		{
			JACOBI_ITERATION(A, b, Dimension, x_start, x_next);
			RESIDUAL(A, x_start, b, Dimension, r);
			for (i = 0; i < Dimension; i++)
				x_start[i] = x_next[i];

			Out_Residual << Residual << " ";
		}
		Out_Residual << "];" << endl;
	}
	else if (Stop_Criterion == 2)
	{
		//相邻误差准则
		for (i = 0; i < Dimension; i++)
			x_next[i] = x_start[i];
		do
		{
			for (i = 0; i < Dimension; i++)
				x_start[i] = x_next[i];
			JACOBI_ITERATION(A, b, Dimension, x_start, x_next);

			Error = DISTANCE(x_next, x_star, Dimension);
			Out_Error  << Error << " ";
		} while (DISTANCE(x_start, x_next, Dimension)>0.000001);
		Out_Error << endl;
	}
	else if (Stop_Criterion == 3)
	{
		//后验误差停机准则
		double det1, det2;
		for (i = 0; i < Dimension; i++)
			x_next[i] = x_start[i];
		for (i = 0; i < Dimension; i++)
			x_start[i] = x_next[i];
		JACOBI_ITERATION(A, b, Dimension, x_start, x_next);
		det1 = DISTANCE(x_start, x_next, Dimension);
		for (i = 0; i < Dimension; i++)
			x_start[i] = x_next[i];
		JACOBI_ITERATION(A, b, Dimension, x_start, x_next);
		det2 = DISTANCE(x_start, x_next, Dimension);
		while (det2*det2 / fabs(det1 - det2)>0.000001)
		{
			for (i = 0; i < Dimension; i++)
				x_start[i] = x_next[i];
			JACOBI_ITERATION(A, b, Dimension, x_start, x_next);
			det1 = det2;
			det2 = DISTANCE(x_start, x_next, Dimension);
		}
	}
	else
	{
		cout << "输入停机准则错误：请输入{1，2，3}之一：" << endl;
		cout << "1.残量准则；2.相邻误差准则；3.后验误差停机准则。";
		exit(1);
	}
}

void GAUSS_SEIDEL_ITERATION(double A[][2048], double b[], int Dimension, double x_now[], double x_next[])
{
	int i, j;
	for (i = 0; i < Dimension; i++)
	{
		x_next[i] = b[i];
		j = 0;
		while (j<i)
		{
			x_next[i] -= A[i][j] * x_next[j];
			j++;
		}
		j++;
		while (j < Dimension)
		{
			x_next[i] -= A[i][j] * x_now[j];
			j++;
		}
		x_next[i] /= A[i][i];
	}
	Gauss_Seidel_Iteration_Number++;
}
void GAUSS_SEIDEL(double A[][2048], double b[], int Dimension, double x_start[], double x_next[], int Stop_Criterion)
//Stop_Criterion=1.残量准则；2.相邻误差准则；3.后验误差停机准则
{
	int i;

	if (Stop_Criterion == 1)
	{
		double r[2048];
		RESIDUAL(A, x_start, b, Dimension, r);
		while ((Residual=NORM_INFINITE(r, Dimension))>0.000001)//残差准则
		{
			GAUSS_SEIDEL_ITERATION(A, b, Dimension, x_start, x_next);
			RESIDUAL(A, x_start, b, Dimension, r);
			for (i = 0; i < Dimension; i++)
				x_start[i] = x_next[i];

			Out_Residual << Residual << " ";
		}
		Out_Residual << endl;
	}
	else if (Stop_Criterion == 2)
	{
		//相邻误差准则
		for (i = 0; i < Dimension; i++)
			x_next[i] = x_start[i];
		do
		{
			for (i = 0; i < Dimension; i++)
				x_start[i] = x_next[i];
			GAUSS_SEIDEL_ITERATION(A, b, Dimension, x_start, x_next);
	
			Error = DISTANCE(x_next, x_star, Dimension);
			Out_Error << Error << " ";
		} while (DISTANCE(x_start, x_next, Dimension)>0.000001);
		Out_Error << endl;
	}
	else if (Stop_Criterion == 3)
	{
		//后验误差停机准则
		double det1, det2;
		for (i = 0; i < Dimension; i++)
			x_next[i] = x_start[i];
		for (i = 0; i < Dimension; i++)
			x_start[i] = x_next[i];
		GAUSS_SEIDEL_ITERATION(A, b, Dimension, x_start, x_next);
		det1 = DISTANCE(x_start, x_next, Dimension);
		for (i = 0; i < Dimension; i++)
			x_start[i] = x_next[i];
		GAUSS_SEIDEL_ITERATION(A, b, Dimension, x_start, x_next);
		det2 = DISTANCE(x_start, x_next, Dimension);
		while (det2*det2 / fabs(det1 - det2)>0.000001)
		{
			for (i = 0; i < Dimension; i++)
				x_start[i] = x_next[i];
			GAUSS_SEIDEL_ITERATION(A, b, Dimension, x_start, x_next);
			det1 = det2;
			det2 = DISTANCE(x_start, x_next, Dimension);
		}
	}
	else
	{
		cout << "输入停机准则错误：请输入{1，2，3}之一：" << endl;
		cout << "1.残量准则；2.相邻误差准则；3.后验误差停机准则。";
		exit(1);
	}
}
void CHEBYSHEV_ITERATION(double A[][2048],double b[],int Dimension,double x_now[],double x_next[],int Frequency)
{
	int i,j;
	double Chebyshev_Residual[2048];
	RESIDUAL(A, x_now, b, Dimension, Chebyshev_Residual);
	for (i = 0; i < Frequency; i++)
	{
		x_next[i] = x_now[i] ;
	}
}


